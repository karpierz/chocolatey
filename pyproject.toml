# Copyright (c) 2022-2023 Adam Karpierz
# Licensed under the zlib/libpng License
# https://opensource.org/licenses/Zlib

[build-system]
build-backend = 'setuptools.build_meta'
requires = ['setuptools', 'wheel', 'packaging', 'tox>=3.28.0,<4']

[project]
name        = 'chocolatey'
version     = '0.3.3'
description = 'MS Windows Task Scheduler.'
license = { text = 'zlib/libpng License ; https://opensource.org/licenses/Zlib' }
authors = [
    { name  = 'Adam Karpierz' },
    { email = 'adam@karpierz.net' },
]
maintainers = [
    { name  = 'Adam Karpierz' },
    { email = 'adam@karpierz.net' },
]
keywords = ['chocolatey']
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: zlib/libpng License',
    'Operating System :: OS Independent',
    'Natural Language :: Polish',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: Implementation :: CPython',
    'Topic :: Software Development :: Libraries :: Python Modules',
]
requires-python = '>=3.7.9,<4.0.0'
dependencies = [
    # mandatory
    'setuptools',
    'pkg_about',
    # others
    'atpublic',
    'nocasedict>=2.0.1',
    'regex>=2023.6.3',
]
dynamic = ['readme']
[project.optional-dependencies]
doc = [
    'Sphinx',
    'sphinx-tabs',
    'sphinx_copybutton',
    'sphinxcontrib-spelling',
    'sphinx-lint',
    'restructuredtext-lint',
    'nbsphinx',
]
test = [
    'deepdiff',
]
[project.urls]
Homepage      = 'https://pypi.org/project/chocolatey/'
Documentation = 'https://chocolatey.readthedocs.io/'
Download      = 'https://pypi.org/project/chocolatey/'
Source        = 'https://github.com/karpierz/chocolatey'
Issues        = 'https://github.com/karpierz/chocolatey/issues'

[project.scripts]
#'chocolatey' = 'chocolatey.__main__:main'

[project.gui-scripts]
#'chocolatey-gui' = 'chocolatey.gui:main'

#[project.entry-points.'chocolatey.magical']
#epoint = 'chocolatey:main_epoint'

[tool.setuptools.dynamic]
readme = { file = ['README.rst', 'CHANGES.rst'], content-type = 'text/x-rst; charset=UTF-8' }

[tool.setuptools]
license-files = ['LICENSE']
include-package-data = true
platforms = ['any']
zip-safe = true

[tool.setuptools.packages.find]
namespaces = false
where = ['src']

[tool.setuptools.package-dir]
'' = 'src'
#'chocolatey.tests' = 'tests'

[tool.setuptools.package-data]
chocolatey = [
]

[tool.coverage.run]
source = [
    'chocolatey',
    'tests',
]
omit = [
]
data_file = '.tox/coverage/.coverage'

[tool.coverage.report]
exclude_lines = [
    # Regexes
    # Have to re-enable the standard pragma
    'pragma: no cover',
    'if\s+self\.debug\s+:',
    'if\s+__debug__\s+:',
    'raise (AssertionError|NotImplementedError)',
    'if\s+(0|False)\s*:',
    '''if\s+__name__.*\s*==\s*'__main__'\s*:''',
    'if\s+__name__.*\s*==\s*"__main__"\s*:',
    '^\s*@unittest\.skip\(',
    '^\s*@unittest\.skipIf\(sys\.platform\.startswith\("win"\)',
]
omit = [
    'tests/run.py',
]
skip_covered = false

[tool.coverage.html]
directory = '.tox/coverage/.coverage.html'

[tool.flake8]
filename = ['*.py','*.pyx']
#include = ['tests']
#exclude = ['.tox','*.egg','.git','__pycache__','build','_build','docs/_build','dist']
max-line-length = 99
ignore = ['E126','E203','E221','E251','E302','E701','E702','E731',
          'E122','E127','E128','E222','E272','E241','E266','E226','E704',
          'D100','D101','D102','D103','D104','D400','D401','D202',
          'N806','N802','N803','N801',
          'I100','W503']
# (e.g. 'E4','W') default: 'E121','E123','126','226','E24','704'
#select =
#select = ['E','W','F','N','I']
output-file = '.tox/lint/flake8out.txt'
count = true
#show-pep8,
#show-source
#verbose
#quiet

#
# Configuration(s) for tox
#

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py{37,38,39,310,311}, docs
minversion = 3.28.0,<4
isolated_build = True
skip_missing_interpreters = true
requires =
    {[base]setup_requires}
    tox-venv
    tox-backticks
    tox-tags
    tox-run-before

[base]
setup_requires =
    pip
    setuptools
    wheel
packagesubdir = chocolatey

[testenv]
passenv = WINDIR
commands =
    {envpython} --version
    {envpython} -B -m tests {posargs}
extras = test
deps =
    {[base]setup_requires}

[testenv:prepare]
basepython = python3.7
skip_install = true
allowlist_externals =
    cmd
    .build
commands =
    cmd /C if exist .build.cmd .build.cmd

[testenv:coverage]
basepython = python3.7
commands =
    {envpython} -m coverage erase
    -{envpython} -B -m coverage run -m tests {posargs}
    {envpython} -m coverage report
    {envpython} -m coverage html
deps =
    {[testenv]deps}
    coverage
    diff-cover

[testenv:docs]
basepython = python3.7
commands =
    {envpython} -m sphinxlint --ignore .tox --ignore build --ignore dist
   #{envpython} -m sphinx.apidoc -f {envsitepackagesdir}/{[base]packagesubdir}
    {envpython} -c "from setuptools import setup ; setup()" -v build_sphinx -b html -E
    {envpython} -c "from setuptools import setup ; setup()" -v build_sphinx -b linkcheck
    {envpython} -c "from setuptools import setup ; setup()" -v build_sphinx -b doctest
extras = doc
deps =

[testenv:build]
basepython = python3.7
setenv =
    {[testenv]setenv}
    PKG_PVER=`{envpython} -c "import platform ; print(''.join(platform.python_version_tuple()[:2]))" 2> nul`
    PKG_NAME=`{envpython} -c "import warnings ; warnings.filterwarnings('ignore') ;import setuptools ; setuptools._distutils.core._setup_stop_after='config' ; print(setuptools.setup().metadata.get_name(),     end='')" 2> nul`
    PKG_DIST=`{envpython} -c "import warnings ; warnings.filterwarnings('ignore') ;import setuptools ; setuptools._distutils.core._setup_stop_after='config' ; print(setuptools.setup().metadata.get_fullname(), end='')" 2> nul`
commands =
    {[testenv]commands}
    {[testenv:docs]commands}
    {envpython} -c "from setuptools import setup ; setup()" --quiet sdist --formats=zip
    {envpython} -c "from setuptools import setup ; setup()" --quiet bdist_wheel
    # check out for PyPi
    {envpython} -m twine check dist/*
extras =
    {[testenv]extras}
    {[testenv:docs]extras}
deps =
    {[testenv]deps}
    {[testenv:docs]deps}
    twine>=4.0.2

[testenv:publish]
basepython = python3.7
setenv =
    {[testenv:build]setenv}
commands =
    {[testenv:build]commands}
    # publish on PyPi
    {envpython} -m twine upload dist/*
extras =
    {[testenv:build]extras}
deps =
    {[testenv:build]deps}
    twine>=4.0.2

[testenv:lint]
basepython = python3.7
commands =
    #{envpython} -m flake8p {envsitepackagesdir}/{[base]packagesubdir}/
extras =
deps =
    {[testenv]deps}
    flake8
    flake8-pyproject
    flake8-docstrings
    pep8-naming
    flake8-builtins
"""
